import React from 'react'
import NProgress from 'nprogress'
import Router from 'next/router'
import { connect } from 'react-redux'
import parseUrlVars from 'src/utils/parseUrlVars'
import loadStaticData from 'src/utils/loadStaticData'
import HeadContainer from 'src/containers/headContainer'
import HeaderContainer from 'src/containers/headerContainer'
import FooterContainer from 'src/containers/footerContainer'
import PageContainer from 'src/containers/pageContainer'
import ModalContainer from 'src/containers/modalContainer'
import MidiInterfaceManager from 'src/containers/midiInterfaceManager'
import StorageManager from 'src/containers/storageManager'
import mapStateToProps from './mapStateToProps'
import mapDispatchToProps from './mapDispatchToProps'
import mergeProps from './mergeProps'

class AppContainer extends React.Component {
	static async getInitialProps({
		query,
		asPath,
		isServer,
		store
	}) {
		const {
			routesLoaded,
			localesLoaded,
			stringsLoaded,
			setQuery,
			setRoutes,
			setLocales,
			setStrings,
			setAsPath,
			setUrlVars,
			setFlowProgram,
			setScratchProgram,
			setTextProgram
		} = mergeProps(
			mapStateToProps()(store.getState(), {}),
			mapDispatchToProps(store.dispatch)
		)

		setQuery(query)
		if (!routesLoaded) {
			setRoutes(await loadStaticData('routes.json'))
		}
		if (!localesLoaded) {
			setLocales(await loadStaticData('locales/locales.json'))
		}
		if (!stringsLoaded[query.locale]) {
			setStrings({
				locale : query.locale,
				data   : await loadStaticData(`locales/${query.locale}/computed.json`)
			})
		}
		if (!isServer) {
			setAsPath(asPath)
			setUrlVars(parseUrlVars(asPath))
		}
		// if there is a "program" query, deal with it
		if (query.program) {
			try {
				const program = JSON.parse(query.program)
				if (program.type === 'flow') {
					setFlowProgram(program)
				} else if (program.type === 'scratch') {
					setScratchProgram(program)
				} else if (program.type === 'text') {
					setTextProgram(program)
				}
			} catch (e) {
				// eslint-disable-next-line no-console
				console.log('Error try to handle program query', e)
			}
		}
	}

	async componentDidMount() {
		// hookup nprogress
		Router.router.events.on('routeChangeStart', NProgress.start)
		Router.router.events.on('routeChangeComplete', NProgress.done)
		Router.router.events.on('routeChangeError', NProgress.done)
		// adjust as path on first render
		const {
			setAsPath,
			setUrlVars
		} = this.props
		setAsPath(Router.router.asPath)
		setUrlVars(parseUrlVars(Router.router.asPath))
	}

	componentWillUnmount() {
		// unhook nprogress
		Router.router.events.off('routeChangeStart', NProgress.start)
		Router.router.events.off('routeChangeComplete', NProgress.done)
		Router.router.events.off('routeChangeError', NProgress.done)
	}

	shouldComponentUpdate() {
		// Since we don't really pass down any props/state, we just need
		// to render once.
		return false
	}

	render() {
		return (
			<div className="root app">
				<style jsx>{`
					/* This stylesheet generated by Transfonter (https://transfonter.org) on August 4, 2017 2:45 PM */
					@font-face { font-family: 'Brandon Text'; src: url('/static/fonts/BrandonText-Medium.eot'); src: url('/static/fonts/BrandonText-Medium.eot?#iefix') format('embedded-opentype'),url('/static/fonts/BrandonText-Medium.woff2') format('woff2'),url('/static/fonts/BrandonText-Medium.woff') format('woff'),url('/static/fonts/BrandonText-Medium.ttf') format('truetype'); font-weight: 500; font-style: normal; }
					@font-face { font-family: 'Brandon Text'; src: url('/static/fonts/BrandonText-Regular.eot'); src: url('/static/fonts/BrandonText-Regular.eot?#iefix') format('embedded-opentype'),url('/static/fonts/BrandonText-Regular.woff2') format('woff2'),url('/static/fonts/BrandonText-Regular.woff') format('woff'),url('/static/fonts/BrandonText-Regular.ttf') format('truetype'); font-weight: normal; font-style: normal; }
					@font-face { font-family: 'Brandon Text'; src: url('/static/fonts/BrandonText-Bold.eot'); src: url('/static/fonts/BrandonText-Bold.eot?#iefix') format('embedded-opentype'),url('/static/fonts/BrandonText-Bold.woff2') format('woff2'),url('/static/fonts/BrandonText-Bold.woff') format('woff'),url('/static/fonts/BrandonText-Bold.ttf') format('truetype'); font-weight: bold; font-style: normal; }

					:global(html),
					:global(body) {
						margin: 0;
						font-family: 'Brandon Text', sans-serif;
						font-size: 16px;
						line-height: 1.5;
						-webkit-font-smoothing: subpixel-antialiased;
					}
					:global(*){
						box-sizing: border-box;
					}
					:global(a) {
						color: inherit;
					}
					.root {
						position: fixed;
						height: 100vh;
						width: 100vw;
						display: grid;
						grid-template-columns: 1fr;
						grid-template-rows: 2rem auto 2rem;
					}
					.root :global(> .page) {
						overflow-y: scroll;
						-webkit-overflow-scrolling: touch;
					}
					:global(button) {
						border: none;
						margin: 0;
						padding: 0;
						width: auto;
						overflow: visible;
						background: transparent;
						color: inherit;
						font: inherit;
						text-align: inherit;
						line-height: normal;
						-webkit-font-smoothing: inherit;
						-moz-osx-font-smoothing: inherit;
						-webkit-appearance: none;
						cursor: pointer;
					}
					:global(button::-moz-focus-inner) {
						border: 0;
						padding: 0;
					}
				`}</style>
				<div
					id="remotestorage-widget-container"
					style={{ display : 'none' }}/>
				<HeadContainer />
				<HeaderContainer />
				<PageContainer />
				<FooterContainer />
				<ModalContainer />
				<MidiInterfaceManager />
				<StorageManager />
			</div>
		)
	}
}

export default connect(
	mapStateToProps,
	mapDispatchToProps,
	mergeProps
)(AppContainer)
